// <auto-generated />
using System;
using Entity.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.Model.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy");

                    b.Property<string>("DeletedBy");

                    b.Property<int>("Group");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Key");

                    b.Property<string>("ModifyBy");

                    b.Property<DateTimeOffset>("TimeCreatedOffset");

                    b.Property<DateTimeOffset?>("TimeDeletedOffset");

                    b.Property<DateTimeOffset?>("TimeModifyOffset");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Entity.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifyBy");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("TimeCreatedOffset");

                    b.Property<DateTimeOffset?>("TimeDeletedOffset");

                    b.Property<DateTimeOffset?>("TimeModifyOffset");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Entity.Model.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifyBy");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("TimeCreatedOffset");

                    b.Property<DateTimeOffset?>("TimeDeletedOffset");

                    b.Property<DateTimeOffset?>("TimeModifyOffset");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Entity.Model.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<int>("HobbyType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifyBy");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("TimeCreatedOffset");

                    b.Property<DateTimeOffset?>("TimeDeletedOffset");

                    b.Property<DateTimeOffset?>("TimeModifyOffset");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Entity.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateBy");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifyBy");

                    b.Property<int>("RoleId");

                    b.Property<DateTimeOffset>("TimeCreatedOffset");

                    b.Property<DateTimeOffset?>("TimeDeletedOffset");

                    b.Property<DateTimeOffset?>("TimeModifyOffset");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Country");

                    b.Property<string>("CreateBy");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifyBy");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Note");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RefreshToken");

                    b.Property<DateTimeOffset>("RefreshTokenExpireDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("SexType");

                    b.Property<DateTimeOffset>("TimeCreatedOffset");

                    b.Property<DateTimeOffset?>("TimeDeletedOffset");

                    b.Property<DateTimeOffset?>("TimeModifyOffset");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entity.Model.Device", b =>
                {
                    b.HasOne("Entity.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entity.Model.Hobby", b =>
                {
                    b.HasOne("Entity.User", "User")
                        .WithMany("Hobbies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entity.Model.UserRole", b =>
                {
                    b.HasOne("Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
